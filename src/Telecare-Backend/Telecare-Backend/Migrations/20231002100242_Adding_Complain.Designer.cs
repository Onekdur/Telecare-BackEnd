// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Telecare.Persistance.Contexts;

#nullable disable

namespace Telecare_Backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231002100242_Adding_Complain")]
    partial class Adding_Complain
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.Friends.Friend", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Block")
                        .HasColumnType("bit");

                    b.Property<bool>("BlockFromFriend")
                        .HasColumnType("bit");

                    b.Property<bool>("BlockFromMe")
                        .HasColumnType("bit");

                    b.Property<Guid>("FriendId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("MessageBlock")
                        .HasColumnType("bit");

                    b.Property<bool>("MessageBlockFromFriend")
                        .HasColumnType("bit");

                    b.Property<bool>("MessageBlockFromME")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("Friends");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bee05847-8504-42c2-b565-7b55bb019ecb"),
                            Block = false,
                            BlockFromFriend = false,
                            BlockFromMe = false,
                            FriendId = new Guid("c8f7abda-5b17-4278-8587-dbb0cacc863f"),
                            MemberId = new Guid("0e1c1417-8dc0-4e9d-834d-89a889d2fb82"),
                            MessageBlock = false,
                            MessageBlockFromFriend = false,
                            MessageBlockFromME = false
                        },
                        new
                        {
                            Id = new Guid("16bc35e3-90f3-41cf-9b69-efca279f271e"),
                            Block = false,
                            BlockFromFriend = false,
                            BlockFromMe = false,
                            FriendId = new Guid("dbd04f0a-f03f-4cb1-87c9-23c153928dc5"),
                            MemberId = new Guid("0e1c1417-8dc0-4e9d-834d-89a889d2fb82"),
                            MessageBlock = false,
                            MessageBlockFromFriend = false,
                            MessageBlockFromME = false
                        });
                });

            modelBuilder.Entity("Entities.Models.Friends.FriendRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("FriendRequests");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1435f0f9-1447-44be-85b8-f8d6a0db8bb1"),
                            IsSeen = false,
                            MemberId = new Guid("0e1c1417-8dc0-4e9d-834d-89a889d2fb82"),
                            RequestId = new Guid("95f27cf6-068e-4c73-ace3-50cc86279365")
                        });
                });

            modelBuilder.Entity("Entities.Models.Friends.SendingRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SendFriendRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("SendingRequests");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6c75c774-afca-4081-89d3-db16af47dc6c"),
                            MemberId = new Guid("0e1c1417-8dc0-4e9d-834d-89a889d2fb82"),
                            SendFriendRequestId = new Guid("b6ced54f-5b8e-4688-8e71-ebe9507f97e8")
                        });
                });

            modelBuilder.Entity("Entities.Models.Members.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ParmanentAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PresentAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MemberId")
                        .IsUnique();

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("49ec84e9-8519-42f2-85bd-ba16557e01ab"),
                            MemberId = new Guid("0e1c1417-8dc0-4e9d-834d-89a889d2fb82"),
                            ParmanentAdress = "Pabna",
                            PresentAddress = "Kushtia"
                        });
                });

            modelBuilder.Entity("Entities.Models.Members.CoverPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CoverPhotoLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Ispresent")
                        .HasColumnType("bit");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("CoverPhotos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ae1b7bcf-ffb4-4b04-a0ba-874b3dcdb938"),
                            CoverPhotoLink = "www.colud.com",
                            Ispresent = false,
                            MemberId = new Guid("0e1c1417-8dc0-4e9d-834d-89a889d2fb82")
                        },
                        new
                        {
                            Id = new Guid("124433a0-3f85-4f14-90d4-62c7792429a4"),
                            CoverPhotoLink = "www.aws.com",
                            Ispresent = false,
                            MemberId = new Guid("0e1c1417-8dc0-4e9d-834d-89a889d2fb82")
                        });
                });

            modelBuilder.Entity("Entities.Models.Members.Education", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CureentlyRunnig")
                        .HasColumnType("bit");

                    b.Property<string>("Degree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SchoolName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("To")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("isPrivate")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("MemberId");

                    b.ToTable("Educations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ba8dcaf9-6bc0-47c3-9bfc-926810d453f4"),
                            CureentlyRunnig = false,
                            Degree = "Bsc",
                            From = new DateTime(2023, 10, 2, 10, 2, 41, 853, DateTimeKind.Utc).AddTicks(1266),
                            SchoolName = "Islamic University",
                            To = new DateTime(2028, 10, 2, 16, 2, 41, 853, DateTimeKind.Local).AddTicks(1272),
                            UserId = new Guid("0e1c1417-8dc0-4e9d-834d-89a889d2fb82"),
                            isDelete = false,
                            isPrivate = false
                        },
                        new
                        {
                            Id = new Guid("0dcbc5de-f8f2-4468-8a0c-cf9456839a87"),
                            CureentlyRunnig = false,
                            Degree = "BA",
                            From = new DateTime(2023, 10, 2, 10, 2, 41, 853, DateTimeKind.Utc).AddTicks(1300),
                            SchoolName = "Rajshahi University",
                            To = new DateTime(2028, 10, 2, 16, 2, 41, 853, DateTimeKind.Local).AddTicks(1300),
                            UserId = new Guid("0e1c1417-8dc0-4e9d-834d-89a889d2fb85"),
                            isDelete = false,
                            isPrivate = false
                        });
                });

            modelBuilder.Entity("Entities.Models.Members.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GenDer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeactivate")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RelationShipStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0e1c1417-8dc0-4e9d-834d-89a889d2fb82"),
                            ConcurrencyStamp = "d0702549-c9c5-403c-a6a5-a8001015aacd",
                            Email = "mdsojibhosen444@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Md Sojib",
                            GenDer = "Male",
                            IsDeactivate = false,
                            LastName = "Khan",
                            PasswordHash = "dhsgdwe323",
                            PhoneNumber = "01778553706",
                            PhoneNumberConfirmed = false,
                            RelationShipStatus = "Single"
                        });
                });

            modelBuilder.Entity("Entities.Models.Members.ProfilePhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPresent")
                        .HasColumnType("bit");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("profilePhotoLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("ProfilePhotos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cb1110ab-cf6b-4d01-8a8d-6952047dd678"),
                            IsPresent = false,
                            MemberId = new Guid("0e1c1417-8dc0-4e9d-834d-89a889d2fb82"),
                            profilePhotoLink = "www.colud.com"
                        },
                        new
                        {
                            Id = new Guid("38c6888d-1ef7-459a-8c6c-d85452136ea6"),
                            IsPresent = false,
                            MemberId = new Guid("0e1c1417-8dc0-4e9d-834d-89a889d2fb82"),
                            profilePhotoLink = "www.aws.com"
                        });
                });

            modelBuilder.Entity("Entities.Models.Members.Work", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ComapnyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CurrentlyRunning")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("To")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("MemberId");

                    b.ToTable("Works");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ec7ca561-14e0-4af8-9b8d-17bfd13d7d4e"),
                            ComapnyName = "Devskill",
                            CurrentlyRunning = false,
                            Description = "Hi this sojib",
                            From = new DateTime(2023, 10, 2, 16, 2, 41, 853, DateTimeKind.Local).AddTicks(2650),
                            IsDelete = false,
                            IsPrivate = false,
                            Title = "Intern Software Enginer",
                            To = new DateTime(2023, 10, 3, 12, 2, 41, 853, DateTimeKind.Local).AddTicks(2652),
                            UserId = new Guid("0e1c1417-8dc0-4e9d-834d-89a889d2fb82")
                        },
                        new
                        {
                            Id = new Guid("d85314ec-6e74-4ff7-9767-440cd58c0b2e"),
                            ComapnyName = "Vivasoft",
                            CurrentlyRunning = false,
                            Description = "Descriptiom",
                            From = new DateTime(2023, 10, 2, 16, 2, 41, 853, DateTimeKind.Local).AddTicks(2663),
                            IsDelete = false,
                            IsPrivate = false,
                            Title = " Software Enginer",
                            To = new DateTime(2023, 10, 3, 22, 2, 41, 853, DateTimeKind.Local).AddTicks(2664),
                            UserId = new Guid("0e1c1417-8dc0-4e9d-834d-89a889d2fb82")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Telecare.Domain.Entities.Admins.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CEO")
                        .HasColumnType("bit");

                    b.Property<bool>("GeneralAdmin")
                        .HasColumnType("bit");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("SuperAdmin")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("MemberId")
                        .IsUnique();

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3ef6b1c2-724b-4404-b703-169946e125e2"),
                            CEO = false,
                            GeneralAdmin = false,
                            MemberId = new Guid("0e1c1417-8dc0-4e9d-834d-89a889d2fb82"),
                            SuperAdmin = false
                        });
                });

            modelBuilder.Entity("Telecare.Domain.Entities.User.Doctor.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Experties")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeactivate")
                        .HasColumnType("bit");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhotoLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("MemberId")
                        .IsUnique();

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0e1c1417-8dc0-4e9d-834d-89a889d2fb85"),
                            Description = "I am pathologist",
                            Experties = "Surgery",
                            FullName = "Dr Md Sagore",
                            IsBlock = false,
                            IsDeactivate = false,
                            MemberId = new Guid("0e1c1417-8dc0-4e9d-834d-89a889d2fb82"),
                            PhotoLink = "www.aws.com",
                            Rating = 4.5999999999999996,
                            isActive = false
                        });
                });

            modelBuilder.Entity("Telecare.Domain.Entities.User.Doctor.DoctorComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DoctorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorComments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f0dfe859-c8ff-406e-ba54-2b72b0734b0d"),
                            Comment = "Doctor is very good at surgery ",
                            DoctorId = new Guid("0e1c1417-8dc0-4e9d-834d-89a889d2fb85"),
                            PatientId = new Guid("0e1c1417-8dc0-4e9d-834d-89a889d2fb82")
                        });
                });

            modelBuilder.Entity("Telecare.Domain.Entities.User.Doctor.DoctorFollower", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FollowerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorFollowers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3b4d58e9-e1e3-4819-bdfd-7da7d86dde9f"),
                            DoctorId = new Guid("0e1c1417-8dc0-4e9d-834d-89a889d2fb85"),
                            FollowerId = new Guid("a5925346-db4f-4d67-b81d-3286cb928e77")
                        });
                });

            modelBuilder.Entity("Telecare.Domain.Entities.User.Doctor.DoctorPatient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DoctorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("DoctorPatients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9748a9b2-1766-4b87-8306-86ac4b5bdd89"),
                            DoctorId = new Guid("0e1c1417-8dc0-4e9d-834d-89a889d2fb85"),
                            PatientId = new Guid("0e1c1417-8dc0-4e9d-834d-89a889d2fb82")
                        });
                });

            modelBuilder.Entity("Telecare.Domain.Entities.User.Doctor.DoctorPatientComplain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DoctorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("PatientComplains");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4ad1fe5c-5280-461d-b36b-8895e1898dd8"),
                            Comment = "Doctor's behave very dangerous ",
                            DoctorId = new Guid("0e1c1417-8dc0-4e9d-834d-89a889d2fb85"),
                            PatientId = new Guid("0e1c1417-8dc0-4e9d-834d-89a889d2fb82")
                        });
                });

            modelBuilder.Entity("Telecare.Domain.Entities.User.Doctor.DoctorRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Accept")
                        .HasColumnType("bit");

                    b.Property<string>("Experties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HscCertificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalIdCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalSchoolCertificate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Pending")
                        .HasColumnType("bit");

                    b.Property<bool>("Reject")
                        .HasColumnType("bit");

                    b.Property<string>("SSCCertificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isSeen")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("DoctorRequests");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d4be3e81-fdf8-4c84-a51c-e8e4d2791848"),
                            Accept = false,
                            Experties = "Gyne,Chest,bone",
                            FullName = "Dr Md Sojib Hosen",
                            HscCertificate = "www.aws.com",
                            MedicalIdCard = "www.google.com",
                            MedicalSchoolCertificate = "www.amar.com",
                            MemberId = new Guid("0e1c1417-8dc0-4e9d-834d-89a889d2fb82"),
                            Pending = true,
                            Reject = false,
                            SSCCertificate = "www.aws.com",
                            isSeen = false
                        });
                });

            modelBuilder.Entity("Entities.Models.Friends.Friend", b =>
                {
                    b.HasOne("Entities.Models.Members.Member", "Member")
                        .WithMany("Friends")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Entities.Models.Friends.FriendRequest", b =>
                {
                    b.HasOne("Entities.Models.Members.Member", "Member")
                        .WithMany("FriendRequests")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Entities.Models.Friends.SendingRequest", b =>
                {
                    b.HasOne("Entities.Models.Members.Member", "Member")
                        .WithMany("SendingRequests")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Entities.Models.Members.Address", b =>
                {
                    b.HasOne("Entities.Models.Members.Member", "Member")
                        .WithOne("Addresses")
                        .HasForeignKey("Entities.Models.Members.Address", "MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Entities.Models.Members.CoverPhoto", b =>
                {
                    b.HasOne("Entities.Models.Members.Member", "Member")
                        .WithMany("CoverPicture")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Entities.Models.Members.Education", b =>
                {
                    b.HasOne("Telecare.Domain.Entities.User.Doctor.Doctor", null)
                        .WithMany("Educations")
                        .HasForeignKey("DoctorId");

                    b.HasOne("Entities.Models.Members.Member", null)
                        .WithMany("Educations")
                        .HasForeignKey("MemberId");
                });

            modelBuilder.Entity("Entities.Models.Members.ProfilePhoto", b =>
                {
                    b.HasOne("Entities.Models.Members.Member", "Member")
                        .WithMany("ProfilePicture")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Entities.Models.Members.Work", b =>
                {
                    b.HasOne("Telecare.Domain.Entities.User.Doctor.Doctor", null)
                        .WithMany("Works")
                        .HasForeignKey("DoctorId");

                    b.HasOne("Entities.Models.Members.Member", null)
                        .WithMany("Works")
                        .HasForeignKey("MemberId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Entities.Models.Members.Member", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Entities.Models.Members.Member", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Members.Member", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Entities.Models.Members.Member", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Telecare.Domain.Entities.Admins.Admin", b =>
                {
                    b.HasOne("Entities.Models.Members.Member", "Member")
                        .WithOne("Admins")
                        .HasForeignKey("Telecare.Domain.Entities.Admins.Admin", "MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Telecare.Domain.Entities.User.Doctor.Doctor", b =>
                {
                    b.HasOne("Entities.Models.Members.Member", "Member")
                        .WithOne("Doctor")
                        .HasForeignKey("Telecare.Domain.Entities.User.Doctor.Doctor", "MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Telecare.Domain.Entities.User.Doctor.DoctorComment", b =>
                {
                    b.HasOne("Telecare.Domain.Entities.User.Doctor.Doctor", "Doctor")
                        .WithMany("DoctorComments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Telecare.Domain.Entities.User.Doctor.DoctorFollower", b =>
                {
                    b.HasOne("Telecare.Domain.Entities.User.Doctor.Doctor", "Doctor")
                        .WithMany("DoctorFollowers")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Telecare.Domain.Entities.User.Doctor.DoctorPatient", b =>
                {
                    b.HasOne("Telecare.Domain.Entities.User.Doctor.Doctor", "Doctor")
                        .WithMany("DoctorPatients")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Members.Member", "Member")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("Doctor");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Telecare.Domain.Entities.User.Doctor.DoctorPatientComplain", b =>
                {
                    b.HasOne("Telecare.Domain.Entities.User.Doctor.Doctor", "Doctor")
                        .WithMany("PatientComplains")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Telecare.Domain.Entities.User.Doctor.DoctorRequest", b =>
                {
                    b.HasOne("Entities.Models.Members.Member", "Member")
                        .WithMany("DoctorRequests")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Entities.Models.Members.Member", b =>
                {
                    b.Navigation("Addresses")
                        .IsRequired();

                    b.Navigation("Admins")
                        .IsRequired();

                    b.Navigation("CoverPicture");

                    b.Navigation("Doctor")
                        .IsRequired();

                    b.Navigation("DoctorRequests");

                    b.Navigation("Educations");

                    b.Navigation("FriendRequests");

                    b.Navigation("Friends");

                    b.Navigation("ProfilePicture");

                    b.Navigation("SendingRequests");

                    b.Navigation("Works");
                });

            modelBuilder.Entity("Telecare.Domain.Entities.User.Doctor.Doctor", b =>
                {
                    b.Navigation("DoctorComments");

                    b.Navigation("DoctorFollowers");

                    b.Navigation("DoctorPatients");

                    b.Navigation("Educations");

                    b.Navigation("PatientComplains");

                    b.Navigation("Works");
                });
#pragma warning restore 612, 618
        }
    }
}
